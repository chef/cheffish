#!/usr/bin/env ruby
require 'cheffish/chef_run'
require 'sinatra'

post '/resource/:resource_type/:name' do
  properties = JSON.parse(request.body.read)
  chef_run = Cheffish::ChefRun.new
  begin
    r = chef_run.client.build_resource(params['resource_type'], params['name']) do
      properties.each { |attr, value| public_send(attr, value) }
    end
    chef_run.client.add_resource(r)
    chef_run.converge
    status chef_run.updated? ? 201 : 200
    body "STDOUT: #{chef_run.stdout}\nSTDERR: #{chef_run.stderr}\nLOGS: #{chef_run.logs}"
  rescue
    status 400
    body "ERROR: #{$!}\nBACKTRACE: #{$!.backtrace}\nSTDOUT: #{chef_run.stdout}\nSTDERR: #{chef_run.stderr}\nLOGS: #{chef_run.logs}"
  end
end


# This is broken
get '/resource/:resource_type/:name' do
  if request.body.nil?
    properties = JSON.parse(request.body.read)
  end
  chef_run = Cheffish::ChefRun.new
  begin
    r = chef_run.client.build_resource(params['resource_type'], params['name']) do
      unless properties.nil?
        properties.each { |attr, value| public_send(attr, value) }
      end
    end
    result = r.provider.load_current_resource
    status chef_run.updated? ? 201 : 200
    body result.to_h
  rescue
    status 400
    body "ERROR: #{$!}\nBACKTRACE: #{$!.backtrace}\nSTDOUT: #{chef_run.stdout}\nSTDERR: #{chef_run.stderr}\nLOGS: #{chef_run.logs}"
  end
end
